name: TradingBot CI

on:
  push:
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0' # weekly

env:
  poetry-version: 1.0.10

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    name: Python ${{ matrix.python-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Pip cache
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding poetry.lock
          key: ${{ runner.os }}-pip-${{ env.poetry-version }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'poetry==${{ env.poetry-version }}'

      - name: Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run tests
        run: make ci

#   docker:
#     needs: build
#     runs-on: ubuntu-latest
#     name: Docker build and push

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build and push Docker images
#         uses: docker/build-push-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#           dockerfile: docker/Dockerfile
#           repository: ilcardella/tradingbot
#           build_args: POETRY_VERSION=${{ env.poetry-version }}
#           tag_with_ref: true
#           push: ${{ startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') }}

  buildx:
    needs: build
    runs-on: ubuntu-latest
    name: Docker build and push

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Run Buildx
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --output "type=image,push=false" \
            --file ./docker/Dockerfile \
            -t ilcardella/tradingbot \
            --build-arg POETRY_VERSION=${{ env.poetry-version }} \
            .